forEach: ValueObject
fileName: {{namePascalCase}}.vue
path: frontend/src/components
---
<template>
    {{#referenceClass}}
    <v-card outlined @click="openDialog">
        <v-card-title>
            {{../referenceClass}} : \{{ referenceValue ? referenceValue.name : '' }}
        </v-card-title>

        <v-dialog v-model="pickerDialog">
            <v-card>
                <v-card-title>{{../referenceClass}}</v-card-title>
                <v-card-text>
                    <{{../referenceClass}}Picker v-model="value" @selected="pick"/>
                </v-card-text>
                <v-card-actions>
                    <v-spacer></v-spacer>
                    <v-btn color="deep-purple lighten-2" text @click="pickerDialog = false">Close</v-btn>
                </v-card-actions>
            </v-card>
        </v-dialog>
    </v-card>
    {{/referenceClass}}

    {{^referenceClass}}
    <v-card outlined>
        <v-card-title>
            {{namePascalCase}}
        </v-card-title>

        <v-card-text>
        {{#fieldDescriptors}}
        {{#if (isNotId nameCamelCase)}}
        {{#if (isPrimitive className)}}
            <{{getPrimitiveType className}} label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode"/>
        {{else}}
        {{#checkVO className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
        {{/checkVO}}
        {{#checkEntityMember className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
        {{/checkEntityMember}}
        {{#checkListOfEntityMember className}}
            <{{getEntityClassNameOfList className}}List offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
        {{/checkListOfEntityMember}}
        {{/if}}
        {{/if}}
        {{/fieldDescriptors}}
        </v-card-text>

        <v-card-actions v-if="inList">
            <slot name="actions"></slot>
        </v-card-actions>
    </v-card>
    {{/referenceClass}}
</template>

<script>
    {{#referenceClass}}
    const axios = require('axios').default;
    {{/referenceClass}}

    export default {
        name: '{{namePascalCase}}',
        components:{},
        props: {
            value: [Object, String, Number, Boolean, Array],
            editMode: Boolean,
            isNew: Boolean,
            offline: Boolean,
            inList: Boolean,
            label: String,
        },
        data: () => ({
            {{#referenceClass}}
            newValue: {},
            pickerDialog: false,
            referenceValue: null,
            {{/referenceClass}}
        }),
        async created() {
            if(!Object.values(this.value)[0]) {
                this.$emit('input', {});
                this.newValue = {
                {{#fieldDescriptors}}
                    '{{nameCamelCase}}': '',
                {{/fieldDescriptors}}
                }
            }
            {{#referenceClass}}
            else {
                this.newValue = this.value;
                var path = '/{{#toURL ../referenceClass}}{{/toURL}}';
                var temp = await axios.get(axios.fixUrl(path + '/' +  Object.values(this.value)[0]));
                if(temp.data) {
                    this.referenceValue = temp.data
                {{#fieldDescriptors}}
                    {{#isName}}this.referenceValue.nameField = temp.data.{{nameCamelCase}}; {{/isName}}
                {{/fieldDescriptors}}
                }
            }
            {{/referenceClass}}
            {{^referenceClass}}
            if(typeof this.value === 'object') {
            {{#fieldDescriptors}}
            {{#if (isNotId nameCamelCase)}}
            {{#if (isPrimitive className)}}
                if(!('{{nameCamelCase}}' in this.value)) {
                    this.value.{{nameCamelCase}} = {{#setDefaultValue className}}{{/setDefaultValue}};
                }
            {{/if}}
            {{/if}}
            {{/fieldDescriptors}}
            }
            {{/referenceClass}}
        },
        watch: {
            value(val) {
                this.$emit('input', val);
            },
            newValue(val) {
                this.$emit('input', val);
            },
        },

        methods: {
            edit() {
                this.editMode = true;
            },
            async add() {
                this.editMode = false;
                this.$emit('input', this.value);

                if(this.isNew){
                    this.$emit('add', this.value);
                } else {
                    this.$emit('edit', this.value);
                }
            },
            async remove(){
                this.editMode = false;
                this.isDeleted = true;

                this.$emit('input', this.value);
                this.$emit('delete', this.value);
            },
            change(){
                this.$emit('change', this.value);
            },
            {{#referenceClass}}
            openDialog() {
                var path = '/{{#toURL ../referenceClass}}{{/toURL}}/';

                if(this.editMode) {
                    this.pickerDialog = true;
                } else {
                    this.pickerDialog = false;
                    this.$router.push(path + this.value.id);
                }
            },
            async pick(val){
                this.newValue = val;
                var path = '/{{#toURL ../referenceClass}}{{/toURL}}';
                var temp = await axios.get(axios.fixUrl(path + '/' + val.id));
                if(temp.data) {
                    this.referenceValue = temp.data;
                }
                this.referenceValue.nameField = val.nameField;
            },
            {{/referenceClass}}
        }
    }
</script>


<function>
    window.$HandleBars.registerHelper('print', function (value) {
        console.log(value)
    });

    window.$HandleBars.registerHelper('isNotId', function (className) {
        return (className != 'id')
    })

    window.$HandleBars.registerHelper('isPrimitive', function (className) {
        if(className.includes("String") || className.includes("Integer") || className.includes("Long") || className.includes("Double") || className.includes("Float")
                || className.includes("Boolean") || className.includes("Date")){
            return true;
        } else {
            return false;
        }
    })

    window.$HandleBars.registerHelper('getPrimitiveType', function (className, options) {
        if(className.includes("String")) {
            if(this.isLob) {
                return "LargeObject";
            } else {
                return "String";
            }
        } else if(className.includes("Integer") || className.includes("Long") || className.includes("Double") || className.includes("Float")) {
            if(this.isLob) {
                return "LargeObject";
            } else {
                return "Number";
            }
        } else if(className.includes("Boolean")) {
            return "Boolean";
        } else if(className.includes("Date")) {
            return "Date";
        }
    })

    window.$HandleBars.registerHelper('checkVO', function (className, options) {
        if(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
                || className.endsWith("Payment") || className.endsWith("Money") || className.endsWith("Weather") || className.endsWith("Rating") ){
            return options.fn(this);
        }
    })

    window.$HandleBars.registerHelper('checkEntityMember', function (className, options) {
        if(!(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
                || className.endsWith("Payment") || className.endsWith("Money") || className.endsWith("Weather") || className.endsWith("Rating")) && className.indexOf("java.") == -1 && className.indexOf("List") == -1){
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('checkListOfEntityMember', function (className, options) {
        if(className.indexOf("List") == 0) {
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('getEntityClassNameOfList', function (listClassName) {
        var regex = /\<(.*?)\>/g;
        var match = regex.exec(listClassName);
        if (match) {
            return (match[1]);
        }
        return "NO-CLASS";
    })

    window.$HandleBars.registerHelper('setDefaultValue', function (className) {
        var date = (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10);
        if(className.endsWith("String")) {
            return "''";
        } else if(className.endsWith("Integer") || className.endsWith("Long") || className.endsWith("Double") || className.endsWith("Float")) {
            return 0;
        } else if(className.endsWith("Boolean")) {
            return false;
        } else if(className.endsWith("Date")) {
            return "'" + date + "'";
        } else if(className.includes("List")) {
            return "[]"
        } else {
            return "{}"
        }
    })

     window.$HandleBars.registerHelper('toURL', function (className) {

        var pluralize = function(value, revert){

            var plural = {
                '(quiz)$'               : "$1zes",
                '^(ox)$'                : "$1en",
                '([m|l])ouse$'          : "$1ice",
                '(matr|vert|ind)ix|ex$' : "$1ices",
                '(x|ch|ss|sh)$'         : "$1es",
                '([^aeiouy]|qu)y$'      : "$1ies",
                '(hive)$'               : "$1s",
                '(?:([^f])fe|([lr])f)$' : "$1$2ves",
                '(shea|lea|loa|thie)f$' : "$1ves",
                'sis$'                  : "ses",
                '([ti])um$'             : "$1a",
                '(tomat|potat|ech|her|vet)o$': "$1oes",
                '(bu)s$'                : "$1ses",
                '(alias)$'              : "$1es",
                '(octop)us$'            : "$1i",
                '(ax|test)is$'          : "$1es",
                '(us)$'                 : "$1es",
                '([^s]+)$'              : "$1s"
            };

            var singular = {
                '(quiz)zes$'             : "$1",
                '(matr)ices$'            : "$1ix",
                '(vert|ind)ices$'        : "$1ex",
                '^(ox)en$'               : "$1",
                '(alias)es$'             : "$1",
                '(octop|vir)i$'          : "$1us",
                '(cris|ax|test)es$'      : "$1is",
                '(shoe)s$'               : "$1",
                '(o)es$'                 : "$1",
                '(bus)es$'               : "$1",
                '([m|l])ice$'            : "$1ouse",
                '(x|ch|ss|sh)es$'        : "$1",
                '(m)ovies$'              : "$1ovie",
                '(s)eries$'              : "$1eries",
                '([^aeiouy]|qu)ies$'     : "$1y",
                '([lr])ves$'             : "$1f",
                '(tive)s$'               : "$1",
                '(hive)s$'               : "$1",
                '(li|wi|kni)ves$'        : "$1fe",
                '(shea|loa|lea|thie)ves$': "$1f",
                '(^analy)ses$'           : "$1sis",
                '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$': "$1$2sis",        
                '([ti])a$'               : "$1um",
                '(n)ews$'                : "$1ews",
                '(h|bl)ouses$'           : "$1ouse",
                '(corpse)s$'             : "$1",
                '(us)es$'                : "$1",
                's$'                     : ""
            };

            var irregular = {
                'move'   : 'moves',
                'foot'   : 'feet',
                'goose'  : 'geese',
                'sex'    : 'sexes',
                'child'  : 'children',
                'man'    : 'men',
                'tooth'  : 'teeth',
                'person' : 'people',
                'index'  : 'indexes'
            };

            var uncountable = [
                'sheep', 
                'fish',
                'deer',
                'moose',
                'series',
                'species',
                'money',
                'rice',
                'information',
                'equipment'
            ];

            // save some time in the case that singular and plural are the same
            //console.log("value = " + value)
            if(uncountable.indexOf(value.toLowerCase()) >= 0)
            return this;

            // check for irregular forms
            for(var word in irregular){

                if(revert){
                    var pattern = new RegExp(irregular[word]+'$', 'i');
                    var replace = word;
                } else{ var pattern = new RegExp(word+'$', 'i');
                    var replace = irregular[word];
                }
                if(pattern.test(value))
                    return value.replace(pattern, replace);
            }

            if(revert) var array = singular;
                else  var array = plural;

            // check for matches using regular expressions
            for(var reg in array){

                var pattern = new RegExp(reg, 'i');

                if(pattern.test(value))
                    return value.replace(pattern, array[reg]);
            }

            return value;
        }
        return pluralize(className.toLowerCase())
    })

</function>